Essential {

  Template syntax {
    https://vuejs.org/guide/essentials/application.html#app-configurations
    register component so it is available in whole app
    app.component('TodoDeleteButton', TodoDeleteButton)
    
    
    Dynamically Binding Multiple Attributes
    const objectOfAttrs = {
      id: 'container',
      class: 'wrapper'
    }
    <div v-bind="objectOfAttrs"></div>
    
    
    Restricted Globals Access
    explicitly define additional globals for all Vue expressions by adding them to `app.config.globalProperties`
    
    Dynamic Arguments
    <a :[attributeName]="url"> ... </a>
    
    <a :[someAttr]="value"> ... </a>
    The above will be converted to :[someattr] in in-DOM templates.
    If your component has a someAttr property instead of someattr, your code won't work.
  }

  reactivity {
    - Limitations of reactive()
    It cannot hold primitive types such as string, number
    It only works for object types (objects, arrays, Map and Set)
  
    Since Vue's reactivity tracking works over property access, we must always keep the same reference to the reactive object. This means we can't easily "replace" a reactive object because the reactivity connection to the first reference is lost:
    const state = reactive({ count: 0 })

    // n is a local variable that is disconnected
    // from state.count.
    let n = state.count
    // does not affect original state
    n++

    // count is also disconnected from state.count.
    let { count } = state
    // does not affect original state
    count++
  }

  computed {
    $Computed Caching vs. Methods
    However, the difference is that computed properties are cached based on their reactive dependencies.

    In comparison, a method invocation will always run the function whenever a re-render happens.

    This also means the following computed property will never update, because Date.now() is not a reactive dependency:

    $Writable Computed
    const fullName = computed({
      // getter
      get() {
        return firstName.value + ' ' + lastName.value
      },
      // setter
      set(newValue) {
        // Note: we are using destructuring assignment syntax here.
        [firstName.value, lastName.value] = newValue.split(' ')
      }
    })

    Getters should be side-effect free
    -don't make async requests or mutate the DOM inside a computed getter!
    -Avoid mutating computed value
  }

  list rendereing {

    protoze blbnuly slozene zavorky {
      const myObject = reactive({
        title: 'How to do lists in Vue',
        author: 'Jane Doe',
        publishedAt: '2016-04-10'
      })
  
      <li v-for="(value, key) in myObject">
        {{ key }}: {{ value }}
      </li>
  
      <li v-for="(value, key, index) in myObject">
        {{ index }}. {{ key }}: {{ value }}
      </li>
  
      - v-for with a Range
      <span v-for="n in 10">{{ n }}</span>
  
      t's not recommended to use v-if and v-for on the same element due to implicit precedence. Refer to style guide for details.
  
  
      When working with non-mutating methods, we should replace the old array with the new one:
      `filter(), concat() and slice()`
  
      Be careful with reverse() and sort() in a computed property! These two methods will mutate the original array, which should be avoided in computed getters. Create a copy of the original array before calling these methods:

    }
  }

  events {
    Event Modifiers
    .stop
    .prevent
    .self
    .capture
    .once
    .passive

    <!-- the click event's propagation will be stopped -->
    <a @click.stop="doThis"></a>

    <!-- the submit event will no longer reload the page -->
    <form @submit.prevent="onSubmit"></form>

    <!-- modifiers can be chained -->
    <a @click.stop.prevent="doThat"></a>

    <!-- just the modifier -->
    <form @submit.prevent></form>

    <!-- only trigger handler if event.target is the element itself -->
    <!-- i.e. not from a child element -->
    <div @click.self="doThat">...</div>
    <!-- use capture mode when adding the event listener -->
    <!-- i.e. an event targeting an inner element is handled here before being handled by that element -->
    <div @click.capture="doThis">...</div>

    <!-- the click event will be triggered at most once -->
    <a @click.once="doThis"></a>

    <!-- the scroll event's default behavior (scrolling) will happen -->
    <!-- immediately, instead of waiting for `onScroll` to complete  -->
    <!-- in case it contains `event.preventDefault()`                -->
    <div @scroll.passive="onScroll">...</div>

    The .passive modifier is typically used with touch event listeners for improving performance on mobile devices.


    Key Aliases
    .enter
    .tab
    .delete (captures both "Delete" and "Backspace" keys)
    .esc
    .space
    .up
    .down
    .left
    .right

    System Modifier Keys#
    You can use the following modifiers to trigger mouse or keyboard event listeners only when the corresponding modifier key is pressed:

    .ctrl
    .alt
    .shift
    .meta

    .exact Modifier#
    The .exact modifier allows control of the exact combination of system modifiers needed to trigger an event.
    <!-- this will fire even if Alt or Shift is also pressed -->
    <button @click.ctrl="onClick">A</button>

    <!-- this will only fire when Ctrl and no other keys are pressed -->
    <button @click.ctrl.exact="onCtrlClick">A</button>

    <!-- this will only fire when no system modifiers are pressed -->
    <button @click.exact="onClick">A</button>
  }

  form Bindings {
    true-value and false-value are Vue-specific attributes that only work with v-model

    Modifiers
    .lazy
    .number
    .trim

    <input
      type="checkbox"
      v-model="toggle"
      true-value="yes"
      false-value="no" />

    Here the toggle property's value will be set to 'yes' when the box is checked, and set to 'no' when unchecked.

    <!-- synced after "change" instead of "input" -->
    <input v-model.lazy="msg" />
    <input v-model.number="age" />
  }

  watchers {
    Do note that you can't watch a property of a reactive object like this:
    const obj = reactive({ count: 0 })

    // this won't work because we are passing a number to watch()
    watch(obj.count, (count) => {
      console.log(`count is: ${count}`)
    })

    // instead, use a getter:
    watch(
      () => obj.count,
      (count) => {
        console.log(`count is: ${count}`)
      }
    )


    `const url = ref('https://...')
    const data = ref(null)

    async function fetchData() {
      const response = await fetch(url.value)
      data.value = await response.json()
    }

    // fetch immediately
    fetchData()
    // ...then watch for url change
    watch(url, fetchData)`

    This can be simplified with watchEffect(). watchEffect() allows us to perform a side effect immediately while automatically tracking the effect's reactive dependencies. The above example can be rewritten as:

    js
    `watchEffect(async () => {
      const response = await fetch(url.value)
      data.value = await response.json()
    })`

    If you want to access the DOM in a watcher callback after Vue has updated it, you need to specify the flush: 'post' option:
    watch(source, callback, {
      flush: 'post'
    })
    
    watchEffect(callback, {
      flush: 'post'
    })

    Post-flush watchEffect() also has a convenience alias, watchPostEffect():


    const unwatch = watchEffect(() => {})

    // ...later, when no longer needed
    unwatch()
  }

}

Components In-Depth {
  Component Registration {
    $Global Registration
    import MyComponent from './App.vue'

    app.component('MyComponent', MyComponent)
    components {
    parsing to lowercase <SomethingComponent/> -> <somethring-component></somethring-component>
    Some HTML elements, such as <ul>, <ol>, <table> and <select> have restrictions on what elements can appear inside them, and some elements such as <li>, <tr>, and <option> can only appear inside certain other elements.
    We can use the special is attribute as a workaround:
    <table>
      <tr is="vue:blog-post-row"></tr>
    </table>
    }

    can be chained
    app
    .component('ComponentA', ComponentA)
    .component('ComponentB', ComponentB)
    .component('ComponentC', ComponentC)

    drawbacks
    Global registration prevents build systems from removing unused components (a.k.a "tree-shaking")
    Global registration makes dependency relationships less explicit in large applications.

  }

  Props {

    pure type annotations
    <script setup lang="ts">
      defineProps<{
        title?: string
        likes?: number
      }>()
    </script>


    The following template:
    <BlogPost v-bind="post" />
    Will be equivalent to:
    <BlogPost :id="post.id" :title="post.title" />

    In most cases, the child should emit an event to let the parent perform the mutation.
  registration {
    locally registered components are not also available in descendant components
  }
  }

  events in depth {
    <input v-model="searchText" />

    When used on a component, v-model instead expands to this:
    <CustomInput
      :modelValue="searchText"
      @update:modelValue="newValue => searchText = newValue"
    />

    Multiple v-model bindings
    <UserName
      v-model:first-name="first"
      v-model:last-name="last"
    />

    <script setup>
      defineProps({
        firstName: String,
        lastName: String
      })

      defineEmits(['update:firstName', 'update:lastName'])
      </script>

      <template>
        <input
          type="text"
          :value="firstName"
          @input="$emit('update:firstName', $event.target.value)"
        />
        <input
          type="text"
          :value="lastName"
          @input="$emit('update:lastName', $event.target.value)"
        />
      </template>

    custom modifiers https://vuejs.org/guide/components/events.html#usage-with-v-model
  }

  fallthroughAttributes {
    Unlike props, fallthrough attributes preserve their original casing in JavaScript, so an attribute like foo-bar needs to be accessed as $attrs['foo-bar'].

    <script setup>
    import { useAttrs } from 'vue'

    const attrs = useAttrs()
    </script>
  }

  slots {
    content {
      <button type="submit">
        <slot>
          Submit <!-- fallback content -->
        </slot>
      </button>
  
      A <slot> outlet without name implicitly has the name "default".
  
      v-slot has a dedicated shorthand #, so <template v-slot:header> can be shortened to just <template #header>
  
      <!-- <MyComponent> template -->
      <div>
        <slot :text="greetingMessage" :count="1"></slot>
      </div>
  
      <MyComponent v-slot="slotProps">
        {{ slotProps.text }} {{ slotProps.count }}
      </MyComponent>
      https://vuejs.org/guide/components/slots.html#scoped-slots
    }
  }

  provide/inject {
    #To provide data to a component's descendants, use the provide() function:
    <script setup>
    import { provide } from 'vue'

    provide(/* key */ 'message', /* value */ 'hello!')
    </script>

    #To inject data provided by an ancestor component, use the inject() function:
    <script setup>
    import { inject } from 'vue'

    const message = inject('message')
    </script>

    // `value` will be "default value"
    // if no data matching "message" was provided
    const value = inject('message', 'default value')

    When using reactive provide / inject values, it is recommended to keep any mutations to reactive state inside of the provider whenever possible.

    There may be times when we need to update the data from an injector component. In such cases, we recommend providing a function that is responsible for mutating the state:
    https://vuejs.org/guide/components/provide-inject.html#working-with-reactivity

    https://vuejs.org/guide/components/provide-inject.html#working-with-symbol-keys
  }
}

Reusability {
  composables {
    
    export function useFetch(url) 
    + 
    {
      useFetch() takes a static URL string as input - so it performs the fetch only once and is then done. What if we want it to re-fetch whenever the URL changes? We can achieve that by also accepting refs as an argument:
    }
    
    import { unref } from 'vue'
    +
    {
      function useFeature(maybeRef) {
        // if maybeRef is indeed a ref, its .value will be returned
        // otherwise, maybeRef is returned as-is
        const value = unref(maybeRef)
      }
    }

  }

  directives {
    own kind of v-if, v-show ...
    ex. v-focus.
    In general, it is not recommended to use custom directives on components.
    +{
      In <script setup>, any camelCase variable that starts with the v prefix can be used as a custom directive. In the example above, vFocus can be used in the template as 
    }
  }

  plugins {
    example
    // plugins/i18n.js
    export default {
      install: (app, options) => {
        // inject a globally available $translate() method
        app.config.globalProperties.$translate = (key) => {
          // retrieve a nested property in `options`
          // using `key` as the path
          return key.split('.').reduce((o, i) => {
            if (o) return o[i]
          }, options)
        }
      }
    }

    import i18nPlugin from './plugins/i18n'

    app.use(i18nPlugin, {
      greetings: {
        hello: 'Bonjour!'
      }
    })
  }
}

Built-in-components {

  transition {
    <Transition name="fade">
      ...
    </Transition>
    +{
      .fade-enter-active,
      .fade-leave-active {
        transition: opacity 0.5s ease;
      }
  
      .fade-enter-from,
      .fade-leave-to {
        opacity: 0;
      }
    }

    <!-- assuming Animate.css is included on the page -->
    <Transition
      name="custom-classes"
      enter-active-class="animate__animated animate__tada"
      leave-active-class="animate__animated animate__bounceOutRight"
    >
      <p v-if="show">hello</p>
    </Transition>

    +{
      These will override the conventional class names. This is especially useful when you want to combine Vue's transition system with an existing CSS animation library, such as Animate.css:
    }

    :css="false" 
    +{
      When using JavaScript-only transitions, it is usually a good idea to add the :css="false" prop. This explicitly tells Vue to skip auto CSS transition detection. Aside from being slightly more performant, this also prevents CSS rules from accidentally interfering with the transition:
      <Transition
        ...
        :css="false"
      >
        ...
      </Transition>
    }

    effective 'transform' and 'opacity'. vs layout triggers 'height' or 'margin'
    +{
      Performance Considerations#
      You may notice that the animations shown above are mostly using properties like transform and opacity. These properties are efficient to animate because:
  
      They do not affect the document layout during the animation, so they do not trigger expensive CSS layout calculation on every animation frame.
  
      Most modern browsers can leverage GPU hardware acceleration when animating transform.
  
      In comparison, properties like height or margin will trigger CSS layout, so they are much more expensive to animate, and should be used with caution. We can check resources like CSS-Triggers to see which properties will trigger layout if we animate them.
    }

    <Transition appear>
    +{
      If you also want to apply a transition on the initial render of a node, you can add the appear prop:
  
      template
      <Transition appear>
        ...
      </Transition>
    }

    <Transition mode="out-in">
    +{
      We may want the leaving element to be animated out first, and for the entering element to only be inserted after the leaving animation has finished.
      <Transition mode="out-in">
        ...
      </Transition>
    }
  }

  KeepAlive {
    <!-- Inactive components will be cached! -->
    <KeepAlive>
      <component :is="activeComponent" />
    </KeepAlive>
  }

  Teleport {
    <Teleport :disabled="isMobile">
      ...
    </Teleport>
  }

  Suspense {
    has two slots: #default and #fallback
    for async components, loading, error handling
    +{
      <Suspense> is a built-in component for orchestrating async dependencies in a component tree.
      If using <script setup>, the presence of top-level await expressions automatically makes the component an async dependency:
      The <Suspense> component has two slots: #default and #fallback
      <Suspense>
        <!-- component with nested async dependencies -->
        <Dashboard />
  
        <!-- loading state via #fallback slot -->
        <template #fallback>
          Loading...
        </template>
      </Suspense>
    }
  }

}

Scaling Up {
  tooling {
    https://sfc.vuejs.org/
  
    from Vue CLI to Vite
    +{
      For information on migrating from Vue CLI to Vite:
      https://vuejs.org/guide/scaling-up/tooling.html#project-scaffolding
      Vue CLI -> Vite Migration Guide from VueSchool.io
      Tools / Plugins that help with auto migration
    }
  
    Linting 
    +{
      https://vuejs.org/guide/scaling-up/tooling.html#linting
      npm install -D eslint eslint-plugin-vue, then follow eslint-plugin-vue's configuration guide.
    }
  }

  testing {
    https://vuejs.org/guide/scaling-up/testing.html#recommendation
    Recommendation#
    Vitest

    -test what a component does, not how it does it
  }

  SSR {
    Why SSR
    +Faster time-to-content
    +Unified mental model?
    +Better SEO
    xxx
    -can break Browser-specific code
    -More involved build setup and deployment requirements
    -More server-side load. Rendering a full app in Node.js
  }
}

Best Practices {

  Performance {

    +{
      -Optimize rendering and reduce the number of DOM mutations
      -Measure and profile performance using tools such as PageSpeed Insights, WebPageTest, Chrome DevTools, and Vue DevTools
    }

    refer lodash-es over lodash 
    +{
      If using a build step, prefer dependencies that offer ES module formats and are tree-shaking friendly. For example, prefer lodash-es over lodash.
    }

    In general, the idea is keeping the props passed to child components as stable as possible.

    v-once 
    +{
      is a built-in directive that can be used to render content that relies on runtime data but never needs to update. The entire sub-tree it is used on will be skipped for all future updates.
    }

    list virtualization
    https://vuejs.org/guide/best-practices/performance.html#virtualize-large-lists

    Avoid Unnecessary Component Abstractions
  }

  Accessibility {
    https://vuejs.org/guide/best-practices/accessibility.html#resources
  }

  security {
    Rule No.1: Never Use Non-trusted Templates

    templates or render functions, content is automatically escaped {

      <h1>{{ userProvidedString }}</h1>
      '<script>alert("hi")</script>'
      then it would be escaped to the following HTML:

      template &lt;script&gt;alert(&quot;hi&quot;)&lt;/script&gt;
    }

    never mount Vue on nodes that may contain server-rendered and user-provided content.

    no unsanitized, user-provided content {
      The general rule is that if you allow unsanitized, user-provided content to be executed (as either HTML, JavaScript, or even CSS), you might be opening yourself up to attacks
    }
  }
}

typescript {
  InstanceType {
    <!-- App.vue -->
    <script setup lang="ts">
    import MyModal from './MyModal.vue'
  
    const modal = ref<InstanceType<typeof MyModal> | null>(null)
  
    const openModal = () => {
      modal.value?.open()
    }
    </script>
  }
}